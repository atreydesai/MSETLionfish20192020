package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;



@TeleOp(name="DC",group = "LinearOpMode" )
public class Drive extends skyBotLinear {
    public double fbls , lrls, lrrs;
    public void runOpMode() throws InterruptedException, IllegalMonitorStateException{
        super.runOpMode();

        waitForStart();
        while(super.opModeIsActive()){

            move();
            lift();
            intake();
            claw();
            pm();
            //cap();
            arm();
            telemetry.addData("Status", "Running");
            telemetry.update();
        }

    }

    public void move(){

        fbls = -gamepad1.left_stick_y;
        lrrs = -gamepad1.right_stick_x;
        lrls = gamepad1.left_stick_x;

        if(fbls!=0&&Math.abs(fbls)>Math.abs(lrrs)&&Math.abs(fbls)>Math.abs(lrls)){
            fl.setPower(fbls);
            fr.setPower(fbls);
            bl.setPower(fbls);
            br.setPower(fbls);
        }
        else if(lrrs!=0&&Math.abs(lrrs)>Math.abs(lrls)&&Math.abs(lrrs)>Math.abs(fbls)){
            fl.setPower(lrrs);
            fr.setPower(-lrrs);
            bl.setPower(lrrs);
            br.setPower(-lrrs);
        }
        else if(lrls!=0&&Math.abs(lrls)>Math.abs(lrrs)&&Math.abs(lrls)>Math.abs(fbls)){
            fl.setPower(-lrls);
            fr.setPower(lrls);
            bl.setPower(lrls);
            br.setPower(-lrls);
        }
        else{
            fl.setPower(0);
            fr.setPower(0);
            bl.setPower(0);
            br.setPower(0);
        }
    }

    public boolean liftStall = true;
    public int ls=0;
    public void lift(){ //controls the lift
        if(gamepad2.dpad_down==true){ //lift up
            lift.setMode( DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            lift.setPower(1);
            liftStall = true;
            ls = lift.getCurrentPosition();
        }
        else if(gamepad2.dpad_up==true){//lift down
            lift.setMode( DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            lift.setPower(-1);
            liftStall=true;
            ls = lift.getCurrentPosition();
        }

        else if(liftStall=true){//lift off
            lift.setMode( DcMotor.RunMode.RUN_USING_ENCODER);

            lift.setTargetPosition(ls);
            lift.setMode( DcMotor.RunMode.RUN_TO_POSITION );

            if(lift.getCurrentPosition ()<ls){
                lift.setPower(-0.5);
            }
            else if(lift.getCurrentPosition ()>ls){
                lift.setPower(0.5);
            }
            else if(lift.getCurrentPosition()==ls){
                lift.setPower(0);
            }

        }
        if(gamepad2.y==true){
            liftStall=false;
            lift.setMode( DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            lift.setPower(0);

        }
    }

    public void intake(){ //controls wheel intake
        if(gamepad1.left_bumper==true){ //start intake
            in1.setPower(1);
            in2.setPower(1);

        }
        else if(gamepad1.left_trigger>=0.1){ //reverse intake
            in1.setPower(-1);
            in2.setPower(-1);

        }

        else{ //stops intake wheels
            in1.setPower(0);
            in2.setPower(0);
        }
    }
    public void claw(){ //controls the servo claw
        if(gamepad2.right_trigger>0.1){ //auto clamps if servo is detected
            clamp.setPosition(0.75);
        }
        else if(gamepad2.right_bumper==true){ //releases clamp
            clamp.setPosition(0.25);
        }
    }
    public void pm(){
        if(gamepad1.right_trigger>=0.1){ //platforms go down
            pm1.setPosition(1);
            pm2.setPosition(1);
        }
        else if(gamepad1.right_bumper==true){//platforms go up
            pm1.setPosition(0.1);
            pm2.setPosition(0);
        }
    }
    public void cap(){
        if(gamepad2.left_bumper==true){//rotate capstone out
            cap.setPosition(1);
        }
        else if(gamepad2.left_trigger>0.1){//rotate capstone back in
            cap.setPosition(0);
        }
    }
    public int as = 0;
    public boolean armStall = true;

    public void arm(){
        if(gamepad2.b==true){
            extend.setMode( DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            extend.setPower(1);
            armStall = true;
            as = extend.getCurrentPosition ();
        }
        else if(gamepad2.x==true){
            extend.setMode( DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            extend.setPower(-1);
            armStall = true;
            as = extend.getCurrentPosition ();
        }
        else if(gamepad2.a=true){
            armStall = false;
            extend.setPower(0);
        }
        else if(armStall= true){
            extend.setMode( DcMotor.RunMode.RUN_USING_ENCODER);
            extend.setTargetPosition(ls);
            if(extend.getCurrentPosition ()<ls){
                extend.setPower(-1);
            }
            else if(extend.getCurrentPosition ()>ls){
                extend.setPower(1);
            }
            else{ extend.setPower(0);}
        }
    }


}
